Types of variables

-Instance Variables
-Static variables
-Local Variables

//////////////////////

Instance Variables
--DEcclared Directly within the class
--Represent Object State
--Get Default value
--Cannot be reinitialized within the class


********

Static Variables
--Declared Directly within the class with keyword Static
--Class Variables
---one copy per class
--Gets Default value
--Cannot be reinitialized directly within the class
There are 8 primtive data types
             Primitives
			       | 
				  / \
				 /   \
				/     \
			   /	   \
			boolean **Number***************************
		************integer || Floating-Point || Character*
		*byte|short|int|long ||  float | double||  char*
		*************************************************
		
		
****************************************************		
Type	Bit Depth	  Value Range         Default  *
****************************************************
byte      8 bits      -2^7 to 2^7-1          0
short     16 bits     -2^15 to 2^15-1        0
int       32 bits     -2^63 to 2^63-1        0 
long      64 bits     -2^63 to 2^63-1        0
*******************************************************


byte b = 100;
short s = 1000;
int i = -10000;
long l = 10000000L; //L is required if the value is out if range



Type casting is necesarry

only numeric - to - numeric is possible
eg :
	int x = 65;
	long y =x;(implicit casting by compiler)
	
	int - floating point 
	
Implicit Casting
byte(8-bit)--->short(16 bit)--->int(32-bit)--->long(64-bit)--->float(32-bit)--->double(64-bit) 
									 /
               char(16-bit)---------/
			   
			   
if the arrows are reversed we will get the orders of ex[plicit casting.
eg of explicit casting
--long y =2;
--int x = (int)y;

****************************************************************27

Where are objects stored ?

Objects live on heap
Bit depth ~ JVM specific

///////////
Default ~ null
 -Student s ; //s is null until initialized
  s.updateProfile();//NullPointerException
 ///////////////////////////////////////
 
 int[][] myArray = new int[4][2]

 *new is a Java keyword.
 It creates a Java object and allocates memory for it on the heap. 
 new is also used for array creation, as arrays are also 
 objects.
 
 type[] myArray -> array of type
 
 
 3DARRAYS
 
 
 Method Benefits
 -Avoid duplicate code
 -Divide and Conquer
 --Clean and Readable Code
 --Software Reuse
 
 
 
 Instance Methods
 -Object-level methods
 -Imvocation: objectRef.methodName()
 -Affect Object State
 --Instance Variables
 --Other Instance methods
 
 Static Methods 
 -Keyword static in declaration
 -Class-Level methods
 --No access to state , i.e. can't access instance variables / methods
 -Can access static variables
  -Invocation: className.methodName()
  -main method in static
  -Can access other static methods
 
  
 
 